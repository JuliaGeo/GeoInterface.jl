var documenterSearchIndex = {"docs":
[{"location":"background/history/#History","page":"History","title":"History","text":"","category":"section"},{"location":"background/history/","page":"History","title":"History","text":"The previous pre-1.0 releases of GeoInterface.jl were smaller in scope, aligned to geointerface in Python [sgillies] which builds on GeoJSON [geojson]. It provided abstract types and expected other geometries to be implemented as a subtype. Recent Julia developments have shown that subtyping is difficult–you can only choose one supertype–and many packages moved to trait-based interfaces. Tables.jl is an excellent example of traits-based interface.","category":"page"},{"location":"background/history/","page":"History","title":"History","text":"[sgillies]: https://gist.github.com/sgillies/2217756","category":"page"},{"location":"background/history/","page":"History","title":"History","text":"[geojson]: https://geojson.org/","category":"page"},{"location":"background/history/#Backwards-compatibility","page":"History","title":"Backwards compatibility","text":"","category":"section"},{"location":"background/history/","page":"History","title":"History","text":"To keep function compatibility with pre-v1 releases–even while switching to traits–we keep the following methods.","category":"page"},{"location":"background/history/","page":"History","title":"History","text":"# for Features\nisfeature # new\ngeometry\nproperties\n\n# for Geometries\ncoordinates","category":"page"},{"location":"background/history/","page":"History","title":"History","text":"However, the position type is gone and merged with PointTrait.","category":"page"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"CurrentModule = GeoInterface","category":"page"},{"location":"tutorials/usage/#Traits-interface","page":"Usage","title":"Traits interface","text":"","category":"section"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"GeoInterface provides a traits interface, not unlike Tables.jl, by a set of functions and types for geospatial data.","category":"page"},{"location":"tutorials/usage/#Functions","page":"Usage","title":"Functions","text":"","category":"section"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"(a) a set of functions: ","category":"page"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"isgeometry(geom)\ngeomtrait(geom)\nncoord(geom)\ngetcoord(geom, i)\nngeom(geom)\ngetgeom(geom, i)\n...","category":"page"},{"location":"tutorials/usage/#Types","page":"Usage","title":"Types","text":"","category":"section"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"(b) a set of trait-types for dispatching on said functions.","category":"page"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"The types tell GeoInterface how to interpret the input object inside a GeoInterface function and are specific for each type of Geometry.","category":"page"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"abstract GeometryTrait\nPointTrait <: AbstractPointTrait <: AbstractGeometryTrait\nMultiPointTrait <: AbstractMultiPointGeometryTrait <:AbstractGeometryCollectionTrait <: AbstractGeometryTrait\n...","category":"page"},{"location":"tutorials/usage/#Use","page":"Usage","title":"Use","text":"","category":"section"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"For the Packages that implement GeoInterface, instead of needing to write specific methods to work with their custom geometries, you can just call the above generic functions. For example:","category":"page"},{"location":"tutorials/usage/","page":"Usage","title":"Usage","text":"julia> using ArchGDAL\njulia> geom = createpolygon(...)::ArchGDAL.IGeometry  # no idea about the interface\n\n# Inspect with GeoInterface methods\njulia> isgeometry(geom)\nTrue\njulia> geomtrait(geom)\nPolygonTrait()\njulia> ext = exterior(geom);\njulia> geomtrait(ext)\nLineStringTrait()\njulia> getcoords.(getpoint.(Ref(ext), 1:npoint(ext)))\n[[1.,2.],[2.,3.],[1.,2.]]\njulia> coordinates(geom)  # fallback based on ngeom & npoint above\n","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"CurrentModule = GeoInterface","category":"page"},{"location":"background/sf/#Simple-Features","page":"Simple Features","title":"Simple Features","text":"","category":"section"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"Simple Features (SF) are OGC standards describing two dimensional geographic features, such as Points and Polygons and the relations between them. The standards describe a hierarchy of types (Part 1), a functional interface with SQL (Part II) and an SQL/MM extension with support for circular geometry types, such as Circularstring.","category":"page"},{"location":"background/sf/#Type-hierarchy","page":"Simple Features","title":"Type hierarchy","text":"","category":"section"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"All types used here come from the SF. We added Trait to all geometry types here to distinguish them from actual geometry structs.","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"(Image: SF Type hierarchy. From the Simple Feature standard by OGC.) The SF Type hierarchy. From OpenGIS® Implementation Standard for Geographic information - Simple feature access - Part 1: Common architecture at http://www.opengis.net/doc/is/sfa/1.2.1.","category":"page"},{"location":"background/sf/#Changes-with-respect-to-SF","page":"Simple Features","title":"Changes with respect to SF","text":"","category":"section"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"While we try to adhere to SF, there are changes and extensions to make it more Julian.","category":"page"},{"location":"background/sf/#Function-names","page":"Simple Features","title":"Function names","text":"","category":"section"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"All function names are without the ST_ prefix and are lowercased. In some cases the names have changed as well, to be inline with common Julia functions. NumX becomes nx and geomN becomes getgeom:","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"GeometryType -> geomtrait\nNumGeometries -> ngeom\nGeometryN -> getgeom\nNumPatches -> npatch\n# etc","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"We generalized ngeom and getgeom to apply to  all geometries, not just a AbstractGeometryCollectionTraits.","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"We also simplified the dimension functions. From the three original (dimension, coordinateDimension, spatialDimension) there's now only the coordinate dimension, by using ncoords, which represent coordinate dimensions like X, Y, Z and M. Topological dimensions (a point is 0-dimensional), and the functions related to it, are not used in this interface to prevent confusion. Similarly, we do not overload the Julia ndims, to prevent confusion and possible conflict with custom vector based geometries.","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"coordinateDimension -> ncoords  # x, y, z, m\ndimension -> unused\nspatialDimension -> unused","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"We've generalized the naming of some functions:","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"SRID -> crs\nenvelope -> extent  # also aliased to bbox","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"And added a helper method to clarify the naming of coordinates.","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"coordnames = (:X, :Y, :Z, :M)","category":"page"},{"location":"background/sf/#Coverage","page":"Simple Features","title":"Coverage","text":"","category":"section"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"Not all SF functions are implemented, either as a possibly slower fallback or empty descriptor or not at all. The following SF functions are not (yet) available.","category":"page"},{"location":"background/sf/","page":"Simple Features","title":"Simple Features","text":"dimension  # topological dimensions\nspatialDimension\n\nlocateAlong\nlocateBetween","category":"page"},{"location":"reference/integrations/#Packages","page":"Implementations","title":"Packages","text":"","category":"section"},{"location":"reference/integrations/","page":"Implementations","title":"Implementations","text":"Packages currently integrating with GeoInterface.jl:","category":"page"},{"location":"reference/integrations/","page":"Implementations","title":"Implementations","text":"AlgebraOfGraphics\nArchGDAL\nGADM\nGeoData\nGeoDatasets\nGeoJSON\nGeoMakie\nGeoTables\nGeometryOps\nLibGEOS\nMangal\nOmniSci\nRasters\nShapefile\nSortTileRecursiveTree\nSpatialDependence\nTurf","category":"page"},{"location":"reference/api/","page":"API","title":"API","text":"CurrentModule = GeoInterface","category":"page"},{"location":"reference/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"reference/api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"reference/api/","page":"API","title":"API","text":"Modules = [GeoInterface]\nOrder = [:function]","category":"page"},{"location":"reference/api/#GeoInterface.area-Tuple{Any}","page":"API","title":"GeoInterface.area","text":"area(geom) -> Number\n\nReturn the area of geom in its 2d coordinate system. Note that this is only valid for AbstractSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.asbinary-Tuple{Any}","page":"API","title":"GeoInterface.asbinary","text":"asbinary(geom) -> WKB\n\nConvert geom into Well Known Binary (WKB) representation, such as 000000000140000000000000004010000000000000.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.astext-Tuple{Any}","page":"API","title":"GeoInterface.astext","text":"astext(geom) -> WKT\n\nConvert geom into Well Known Text (WKT) representation, such as POINT (30 10).\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.bbox-Tuple{Any}","page":"API","title":"GeoInterface.bbox","text":"bbox(geom) -> T <: Extents.Extent\n\nAlias for extent, for compatibility with GeoJSON and the Python geointerface. Ensures backwards compatibility with GeoInterface version 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.boundary-Tuple{Any}","page":"API","title":"GeoInterface.boundary","text":"boundary(geom) -> Curve\n\nReturn the boundary of geom. Note that this is only valid for AbstractSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.boundingpolygons-Tuple{Any, Any}","page":"API","title":"GeoInterface.boundingpolygons","text":"boundingpolygons(geom, i) -> AbstractMultiPolygon\n\nReturns the collection of polygons in this surface that bounds the ith patch in the given geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.buffer-Tuple{Any, Any}","page":"API","title":"GeoInterface.buffer","text":"buffer(geom, distance) -> AbstractGeometry\n\nReturns a geometric object that represents a buffer of the given geom with distance.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.centroid-Tuple{Any}","page":"API","title":"GeoInterface.centroid","text":"centroid(geom) -> Point\n\nThe mathematical centroid for this Surface as a Point. The result is not guaranteed to be on this Surface. Note that this is only valid for AbstractSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.contains-Tuple{Any, Any}","page":"API","title":"GeoInterface.contains","text":"contains(a, b) -> Bool\n\nReturns whether a contains b. The order of arguments is important. Equivalent to within with reversed arguments.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.convert-Tuple{Any, Any}","page":"API","title":"GeoInterface.convert","text":"convert(type::CustomGeom, geom)\nconvert(module::Module, geom)\n\nCreate a CustomGeom from any geom that implements the GeoInterface.\n\nCan also convert to a Module, which finds the corresponding geom type for the trait using the modules geointerface_traittype method.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.convexhull-Tuple{Any}","page":"API","title":"GeoInterface.convexhull","text":"convexhull(geom) -> AbstractCurve\n\nReturns a geometric object that represents the convex hull of the given geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.coordinates-Tuple{Any}","page":"API","title":"GeoInterface.coordinates","text":"coordinates(geom) -> Vector\n\nReturn (an iterator of) point coordinates. Ensures backwards compatibility with GeoInterface version 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.coordnames-Tuple{Any}","page":"API","title":"GeoInterface.coordnames","text":"coordnames(geom) -> Tuple{Symbol}\n\nReturn the names of coordinate dimensions (such for (:X,:Y,:Z)) for the geometry.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.crosses-Tuple{Any, Any}","page":"API","title":"GeoInterface.crosses","text":"crosses(a, b) -> Bool\n\nReturns whether a and b cross.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.crs-Tuple{Any}","page":"API","title":"GeoInterface.crs","text":"crs(geom) -> T <: GeoFormatTypes.CoordinateReferenceSystemFormat\n\nRetrieve Coordinate Reference System for given geom. In SF this is defined as SRID.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.difference-Tuple{Any, Any}","page":"API","title":"GeoInterface.difference","text":"difference(a, b) -> AbstractGeometry\n\nReturns a geometric object that represents the Point set difference of a with b\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.disjoint-Tuple{Any, Any}","page":"API","title":"GeoInterface.disjoint","text":"disjoint(a, b) -> Bool\n\nReturns whether a and b are disjoint. Inverse of intersects.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.distance-Tuple{Any, Any}","page":"API","title":"GeoInterface.distance","text":"distance(a, b) -> Number\n\nReturns the shortest distance between a with b.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.endpoint-Tuple{Any}","page":"API","title":"GeoInterface.endpoint","text":"endpoint(geom) -> Point\n\nReturn the last point in the geom. Note that this is only valid for AbstractCurveTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.equals-Tuple{Any, Any}","page":"API","title":"GeoInterface.equals","text":"equals(a, b) -> Bool\n\nReturns whether a and b are equal. Equivalent to (within && contains).\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.extent-Tuple{Any}","page":"API","title":"GeoInterface.extent","text":"extent(obj; fallback=true) -> T <: Extents.Extent\n\nRetrieve the extent (bounding box) for given geom or feature. In SF this is defined as envelope.\n\nExtents.extent(obj) will be called if extent(trait(obj), obj), is not defined so it may be preferable to define Extents.extent directly.\n\nWhen fallback is true, and the obj does not have an extent, an extent is calculated from the coordinates of all geometries in obj.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.geometry-Tuple{Any}","page":"API","title":"GeoInterface.geometry","text":"GeoInterface.geometry(feat) => geom\n\nRetrieve the geometry of feat. It is expected that isgeometry(geom) === true. Ensures backwards compatibility with GeoInterface version 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.geometrycolumns-Tuple{Any}","page":"API","title":"GeoInterface.geometrycolumns","text":"GeoInterface.geometrycolumns(featurecollection) => (:geometry,)\n\nRetrieve the geometrycolumn(s) of featurecollection; the fields (or columns in a table) which contain geometries that support GeoInterface.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.geomtrait-Tuple{Any}","page":"API","title":"GeoInterface.geomtrait","text":"GeoInterface.geomtrait(geom) => T <: AbstractGeometry\n\nReturns the geometry type, such as PolygonTrait or PointTrait.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getcoord-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getcoord","text":"getcoord(geom, i) -> Number\n\nReturn the ith coordinate for a given geom. A coordinate isa Real. Note that this is only valid for individual AbstractPointTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getcoord-Tuple{Any}","page":"API","title":"GeoInterface.getcoord","text":"getcoord(geom) -> iterator\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getexterior-Tuple{Any}","page":"API","title":"GeoInterface.getexterior","text":"getexterior(geom) -> Curve\n\nReturns the exterior ring of a Polygon as a AbstractCurve. Note that this is only valid for AbstractPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getfeature-Tuple{Any}","page":"API","title":"GeoInterface.getfeature","text":"GeoInterface.getfeature(collection) => [feature, ...]\n\nRetrieve the features of collection as some iterable of features. It is expected that isfeature(feature) === true.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getgeom-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getgeom","text":"getgeom(geom, i::Integer) -> AbstractGeometry\n\nReturns the ith geometry for the given geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getgeom-Tuple{Any}","page":"API","title":"GeoInterface.getgeom","text":"getgeom(geom) -> iterator\n\nReturns an iterator over all geometry components in geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.gethole-Tuple{Any, Integer}","page":"API","title":"GeoInterface.gethole","text":"gethole(geom, i::Integer) -> Curve\n\nReturns the ith interior ring for this given geom. Note that this is only valid for AbstractPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.gethole-Tuple{Any}","page":"API","title":"GeoInterface.gethole","text":"gethole(geom) -> iterator\n\nReturns an iterator over all holes in geom. Note that this is only valid for AbstractPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getlinestring-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getlinestring","text":"getlinestring(geom, i::Integer) -> AbstractCurve\n\nReturns the ith linestring for the given geom. Note that this is only valid for AbstractMultiLineStringTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getlinestring-Tuple{Any}","page":"API","title":"GeoInterface.getlinestring","text":"getlinestring(geom) -> iterator\n\nReturns an iterator over all linestrings in a geometry. Note that this is only valid for AbstractMultiLineStringTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpatch-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getpatch","text":"getpatch(geom, i::Integer) -> AbstractPolygon\n\nReturns the ith patch for the given geom. Note that this is only valid for AbstractPolyhedralSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpatch-Tuple{Any}","page":"API","title":"GeoInterface.getpatch","text":"getpatch(geom) -> iterator\n\nReturns an iterator over all patches in geom. Note that this is only valid for AbstractPolyhedralSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpoint-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getpoint","text":"getpoint(geom, i::Integer) -> Point\n\nReturn the ith Point in given geom. Note that this is only valid for AbstractCurveTraits and AbstractMultiPointTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpoint-Tuple{Any}","page":"API","title":"GeoInterface.getpoint","text":"getpoint(geom) -> iterator\n\nReturns an iterator over all points in geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpolygon-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getpolygon","text":"getpolygon(geom, i::Integer) -> AbstractCurve\n\nReturns the ith polygon for the given geom. Note that this is only valid for AbstractMultiPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getpolygon-Tuple{Any}","page":"API","title":"GeoInterface.getpolygon","text":"getpolygon(geom) -> iterator\n\nReturns an iterator over all polygons in a geometry. Note that this is only valid for AbstractMultiPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getring-Tuple{Any, Integer}","page":"API","title":"GeoInterface.getring","text":"getring(geom, i::Integer) -> AbstractCurve\n\nA specific ring i in a polygon or multipolygon (exterior and holes). Note that this is only valid for AbstractPolygonTraits and AbstractMultiPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.getring-Tuple{Any}","page":"API","title":"GeoInterface.getring","text":"getring(geom) -> iterator\n\nReturns an iterator over all rings in geom. Note that this is only valid for AbstractPolygonTraits and AbstractMultiPolygonTraits in single-argument form.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.intersection-Tuple{Any, Any}","page":"API","title":"GeoInterface.intersection","text":"intersection(a, b) -> AbstractGeometry\n\nReturns a geometric object that represents the Point set intersection of a with b\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.intersects-Tuple{Any, Any}","page":"API","title":"GeoInterface.intersects","text":"intersects(a, b) -> Bool\n\nReturns whether a and b intersect. Inverse of disjoint.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.is3d-Tuple{Any}","page":"API","title":"GeoInterface.is3d","text":"is3d(geom) -> Bool\n\nReturn whether the given geom has a :Z coordinate.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isclosed-Tuple{Any}","page":"API","title":"GeoInterface.isclosed","text":"isclosed(geom) -> Bool\n\nReturn whether the geom is closed, i.e. whether the startpoint is the same as the endpoint. Note that this is only valid for AbstractCurveTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isempty-Tuple{Any}","page":"API","title":"GeoInterface.isempty","text":"isempty(geom) -> Bool\n\nReturn true when the geometry is empty.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isfeature-Tuple{T} where T","page":"API","title":"GeoInterface.isfeature","text":"GeoInterface.isfeature(x) => Bool\n\nCheck if an object x is a feature and thus implicitly supports some GeoInterface methods. A feature is a combination of a geometry and properties, not unlike a row in a table. It is recommended that for users implementing MyType, they define only isfeature(::Type{MyType}). isfeature(::MyType) will then automatically delegate to this method.\n\nEnsures backwards compatibility with GeoInterface version 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isfeaturecollection-Tuple{T} where T","page":"API","title":"GeoInterface.isfeaturecollection","text":"GeoInterface.isfeaturecollection(x) => Bool\n\nCheck if an object x is a collection of features and thus implicitly supports some GeoInterface methods. A feature collection is a collection of features, and may also contain metatdata for the whole collection, like an Extent.\n\nIt is recommended that for users implementing MyType, they define only isfeaturecollection(::Type{MyType}). isfeaturecollection(::MyType) will then automatically delegate to this method.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isgeometry-Tuple{T} where T","page":"API","title":"GeoInterface.isgeometry","text":"GeoInterface.isgeometry(x) => Bool\n\nCheck if an object x is a geometry and thus implicitly supports GeoInterface methods. It is recommended that for users implementing MyType, they define only isgeometry(::Type{MyType}). isgeometry(::MyType) will then automatically delegate to this method.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.ismeasured-Tuple{Any}","page":"API","title":"GeoInterface.ismeasured","text":"ismeasured(geom) -> Bool\n\nReturn whether the given geom has a :M coordinate.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.isring-Tuple{Any}","page":"API","title":"GeoInterface.isring","text":"isring(geom) -> Bool\n\nReturn whether the geom is a ring, i.e. whether the geom isclosed and issimple. Note that this is only valid for AbstractCurveTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.issimple-Tuple{Any}","page":"API","title":"GeoInterface.issimple","text":"issimple(geom) -> Bool\n\nReturn true when the geometry is simple, i.e. doesn't cross or touch itself.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.length-Tuple{Any}","page":"API","title":"GeoInterface.length","text":"length(geom) -> Number\n\nReturn the length of geom in its 2d coordinate system. Note that this is only valid for AbstractCurveTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.m-Tuple{Any}","page":"API","title":"GeoInterface.m","text":"m(geom) -> Number\n\nReturn the :M (measured) coordinate of the given geom. Note that this is only valid for AbstractPointTraits.\n\nFor length 4 Tuple and Vector points, the fouth value is returned. \n\nLength 3 Tuple and Vector points can not represent measured points, and will throw an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.ncoord-Tuple{Any}","page":"API","title":"GeoInterface.ncoord","text":"ncoord(geom) -> Integer\n\nReturn the number of coordinate dimensions (such as 3 for X,Y,Z) for the geometry. Note that SF distinguishes between dimensions, spatial dimensions and topological dimensions, which we do not.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.nfeature-Tuple{Any}","page":"API","title":"GeoInterface.nfeature","text":"GeoInterface.nfeature(collection)\n\nRetrieve the number of features in a feature collection.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.ngeom-Tuple{Any}","page":"API","title":"GeoInterface.ngeom","text":"ngeom(geom) -> Integer\n\nReturns the number of geometries for the given geom.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.nhole-Tuple{Any}","page":"API","title":"GeoInterface.nhole","text":"nhole(geom) -> Integer\n\nReturns the number of holes for this given geom. Note that this is only valid for AbstractPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.nlinestring-Tuple{Any}","page":"API","title":"GeoInterface.nlinestring","text":"nlinestring(geom) -> Integer\n\nReturns the number of curves for the given geom. Note that this is only valid for AbstractMultiLineStringTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.npatch-Tuple{Any}","page":"API","title":"GeoInterface.npatch","text":"npatch(geom)\n\nReturns the number of patches for the given geom. Note that this is only valid for AbstractPolyhedralSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.npoint-Tuple{Any}","page":"API","title":"GeoInterface.npoint","text":"npoint(geom) -> Int\n\nReturn the number of points in given geom. Note that this is only valid for AbstractCurveTraits and AbstractMultiPointTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.npolygon-Tuple{Any}","page":"API","title":"GeoInterface.npolygon","text":"npolygon(geom) -> Integer\n\nReturns the number of polygons for the given geom. Note that this is only valid for AbstractMultiPolygonTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.nring-Tuple{Any}","page":"API","title":"GeoInterface.nring","text":"nring(geom) -> Integer\n\nReturn the number of rings in given geom. Note that this is only valid for AbstractPolygonTraits and AbstractMultiPolygonTraits\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.overlaps-Tuple{Any, Any}","page":"API","title":"GeoInterface.overlaps","text":"overlaps(a, b) -> Bool\n\nReturns whether a and b overlap. Also called covers in DE-9IM.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.pointonsurface-Tuple{Any}","page":"API","title":"GeoInterface.pointonsurface","text":"pointonsurface(geom) -> Point\n\nA Point guaranteed to be on this geometry (as opposed to centroid). Note that this is only valid for AbstractSurfaceTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.properties-Tuple{Any}","page":"API","title":"GeoInterface.properties","text":"GeoInterface.properties(feat) => properties\n\nRetrieve the properties of feat. This can be any Iterable that behaves like an AbstractRow. Ensures backwards compatibility with GeoInterface version 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.relate-Tuple{Any, Any, Any}","page":"API","title":"GeoInterface.relate","text":"relate(a, b, relationmatrix::String) -> Bool\n\nReturns whether a and b relate, based on the provided relation matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.startpoint-Tuple{Any}","page":"API","title":"GeoInterface.startpoint","text":"startpoint(geom) -> Point\n\nReturn the first point in the geom. Note that this is only valid for AbstractCurveTraits.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.subtrait-Tuple{AbstractPointTrait}","page":"API","title":"GeoInterface.subtrait","text":"subtrait(t::AbstractGeometryTrait)\n\nGets the expected, possible abstract, (sub)trait for subgeometries (retrieved with getgeom) of trait t. This follows the Type hierarchy of Simple Features.\n\nExamples\n\njulia> GeoInterface.subtrait(LineStringTrait())\nAbstractPointTrait\njulia> GeoInterface.subtrait(PolygonTrait())  # Any of LineStringTrait, LineTrait, LinearRingTrait\nAbstractLineStringTrait\n\n# `nothing` is returned when there's no subtrait or when it's not known beforehand\njulia> isnothing(GeoInterface.subtrait(PointTrait()))\ntrue\njulia> isnothing(GeoInterface.subtrait(GeometryCollectionTrait()))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.symdifference-Tuple{Any, Any}","page":"API","title":"GeoInterface.symdifference","text":"symdifference(a, b) -> AbstractGeometry\n\nReturns a geometric object that represents the Point set symmetric difference of a with b.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.testfeature-Tuple{Any}","page":"API","title":"GeoInterface.testfeature","text":"testfeature(feature)\n\nTest whether the required interface for your feature has been implemented correctly.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.testfeaturecollection-Tuple{Any}","page":"API","title":"GeoInterface.testfeaturecollection","text":"testfeaturecollection(featurecollection)\n\nTest whether the required interface for your featurecollection has been implemented correctly.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.testgeometry-Tuple{Any}","page":"API","title":"GeoInterface.testgeometry","text":"testgeometry(geom)\n\nTest whether the required interface for your geom has been implemented correctly.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.touches-Tuple{Any, Any}","page":"API","title":"GeoInterface.touches","text":"touches(a, b) -> Bool\n\nReturns whether a and b touch.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.trait-Tuple{Any}","page":"API","title":"GeoInterface.trait","text":"GeoInterface.trait(geom) => T <: AbstractGeometry\n\nReturns the object type, such as FeatureTrait. For all isgeometry objects trait is the same as geomtrait(obj), e.g. PointTrait.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.union-Tuple{Any, Any}","page":"API","title":"GeoInterface.union","text":"union(a, b) -> AbstractGeometry\n\nReturns a geometric object that represents the Point set union of a with b\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.within-Tuple{Any, Any}","page":"API","title":"GeoInterface.within","text":"within(a, b) -> Bool\n\nReturns whether a is within b. The order of arguments is important. Equivalent to contains with reversed arguments.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.x-Tuple{Any}","page":"API","title":"GeoInterface.x","text":"x(geom) -> Number\n\nReturn the :X coordinate of the given geom. Note that this is only valid for AbstractPointTraits.\n\nFor Tuple and Vector points, the first value is returned.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.y-Tuple{Any}","page":"API","title":"GeoInterface.y","text":"y(geom) -> Number\n\nReturn the :Y coordinate of the given geom. Note that this is only valid for AbstractPointTraits.\n\nFor Tuple and Vector points, the second value is returned.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#GeoInterface.z-Tuple{Any}","page":"API","title":"GeoInterface.z","text":"z(geom) -> Number\n\nReturn the :Z coordinate of the given geom. Note that this is only valid for AbstractPointTraits.\n\nFor length 3 Tuple and Vector points, the third value is returned.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"reference/api/","page":"API","title":"API","text":"Modules = [GeoInterface]\nOrder = [:type]","category":"page"},{"location":"reference/api/#GeoInterface.AbstractCurvePolygonTrait","page":"API","title":"GeoInterface.AbstractCurvePolygonTrait","text":"An AbstractCurvePolygonTrait type for all curved polygons.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractCurveTrait","page":"API","title":"GeoInterface.AbstractCurveTrait","text":"An AbstractCurveTrait type for all curves.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractFeatureCollectionTrait","page":"API","title":"GeoInterface.AbstractFeatureCollectionTrait","text":"An AbstractFeatureCollectionTrait for all feature collections\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractFeatureTrait","page":"API","title":"GeoInterface.AbstractFeatureTrait","text":"An AbstractFeatureTrait for all features\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractGeometryCollectionTrait","page":"API","title":"GeoInterface.AbstractGeometryCollectionTrait","text":"An AbstractGeometryCollectionTrait type for all geometrycollections.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractGeometryTrait","page":"API","title":"GeoInterface.AbstractGeometryTrait","text":"An AbstractGeometryTrait type for all geometries.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractLineStringTrait","page":"API","title":"GeoInterface.AbstractLineStringTrait","text":"An AbstractLineString type for all linestrings.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractMultiCurveTrait","page":"API","title":"GeoInterface.AbstractMultiCurveTrait","text":"An AbstractMultiCurveTrait type for all multicurves.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractMultiLineStringTrait","page":"API","title":"GeoInterface.AbstractMultiLineStringTrait","text":"An AbstractMultiLineStringTrait type for all multilinestrings.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractMultiPointTrait","page":"API","title":"GeoInterface.AbstractMultiPointTrait","text":"An AbstractMultiPointTrait type for all multipoints.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractMultiPolygonTrait","page":"API","title":"GeoInterface.AbstractMultiPolygonTrait","text":"An AbstractMultiPolygonTrait type for all multipolygons.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractMultiSurfaceTrait","page":"API","title":"GeoInterface.AbstractMultiSurfaceTrait","text":"An AbstractMultiSurfaceTrait type for all multisurfaces.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractPointTrait","page":"API","title":"GeoInterface.AbstractPointTrait","text":"An AbstractPointTrait for all points.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractPolygonTrait","page":"API","title":"GeoInterface.AbstractPolygonTrait","text":"An AbstractPolygonTrait type for all polygons.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractPolyhedralSurfaceTrait","page":"API","title":"GeoInterface.AbstractPolyhedralSurfaceTrait","text":"An AbstractPolyhedralSurfaceTrait type for all polyhedralsurfaces.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractSurfaceTrait","page":"API","title":"GeoInterface.AbstractSurfaceTrait","text":"An AbstractSurfaceTrait type for all surfaces.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.AbstractTrait","page":"API","title":"GeoInterface.AbstractTrait","text":"An AbstractTrait type for all geometries, features and feature collections.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.CircularStringTrait","page":"API","title":"GeoInterface.CircularStringTrait","text":"A CircularStringTrait is a curve, with an odd number of points. A single segment consists of three points, where the first and last are the beginning and end, while the second is halfway the curve.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.CompoundCurveTrait","page":"API","title":"GeoInterface.CompoundCurveTrait","text":"A CompoundCurveTrait is a curve that combines straight LineStringTraits and curved CircularStringTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.CurvePolygonTrait","page":"API","title":"GeoInterface.CurvePolygonTrait","text":"An AbstractCurvePolygonTrait that can contain either circular or straight curves as rings.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.FeatureCollectionTrait","page":"API","title":"GeoInterface.FeatureCollectionTrait","text":"A FeatureCollectionTrait holds objects of FeatureTrait and an extent\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.FeatureTrait","page":"API","title":"GeoInterface.FeatureTrait","text":"A FeatureTrait holds geometries, properties and an extent\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.GeometryCollectionTrait","page":"API","title":"GeoInterface.GeometryCollectionTrait","text":"A GeometryCollection is a collection of Geometrys.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.HexagonTrait","page":"API","title":"GeoInterface.HexagonTrait","text":"A PolygonTrait with six vertices.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.LineStringTrait","page":"API","title":"GeoInterface.LineStringTrait","text":"A LineStringTrait is a collection of straight lines between its PointTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.LineTrait","page":"API","title":"GeoInterface.LineTrait","text":"A LineTrait is LineStringTrait with just two points.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.LinearRingTrait","page":"API","title":"GeoInterface.LinearRingTrait","text":"A LinearRingTrait is a LineStringTrait with the same begin and endpoint.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.MultiCurveTrait","page":"API","title":"GeoInterface.MultiCurveTrait","text":"A MultiCurveTrait is a collection of CircularStringTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.MultiLineStringTrait","page":"API","title":"GeoInterface.MultiLineStringTrait","text":"A MultiLineStringTrait is a collection of LineStringTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.MultiPointTrait","page":"API","title":"GeoInterface.MultiPointTrait","text":"A MultiPointTrait is a collection of PointTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.MultiPolygonTrait","page":"API","title":"GeoInterface.MultiPolygonTrait","text":"A MultiPolygonTrait is a collection of PolygonTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.MultiSurfaceTrait","page":"API","title":"GeoInterface.MultiSurfaceTrait","text":"A MultiSurfaceTrait is a collection of AbstractSurfaceTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.PentagonTrait","page":"API","title":"GeoInterface.PentagonTrait","text":"A PolygonTrait with five vertices.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.PointTrait","page":"API","title":"GeoInterface.PointTrait","text":"A single point.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.PolygonTrait","page":"API","title":"GeoInterface.PolygonTrait","text":"An AbstractSurfaceTrait with straight rings either as exterior or interior(s).\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.PolyhedralSurfaceTrait","page":"API","title":"GeoInterface.PolyhedralSurfaceTrait","text":"A PolyhedralSurfaceTrait is a connected surface consisting of PolygonTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.QuadTrait","page":"API","title":"GeoInterface.QuadTrait","text":"A PolygonTrait with four vertices.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.RectangleTrait","page":"API","title":"GeoInterface.RectangleTrait","text":"A PolygonTrait that is rectangular and could be described by the minimum and maximum vertices.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.TINTrait","page":"API","title":"GeoInterface.TINTrait","text":"A TINTrait is a PolyhedralSurfaceTrait consisting of TriangleTraits.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#GeoInterface.TriangleTrait","page":"API","title":"GeoInterface.TriangleTrait","text":"A PolygonTrait that is triangular.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"reference/api/","page":"API","title":"API","text":"","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"CurrentModule = GeoInterface","category":"page"},{"location":"guides/defaults/#Defaults","page":"Defaults","title":"Defaults","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"There are many function in SF, but most only apply to a single geometry type. Of note here are the ngeom and getgeom for each geometry type, which translate to the following function for each type automatically:","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":" ngeom getgeom\nAbstractPointTrait - -\nAbstractCurveTrait, MultiPointTrait npoint(geom) getpoint(geom)\nAbstractPolygonTrait nring(geom) getring(geom)\nAbstractMultiLineStringTrait nlinestring(geom) getlinestring(geom)\nAbstractMultiPolygonTrait npolygon(geom) getpolygon(geom)\nAbstractPolyhedralSurfaceTrait npatch(geom) getpatch(geom)\nAbstractGeometryCollectionTrait ngeom(geom) getgeom(geom)","category":"page"},{"location":"guides/defaults/#Polygons","page":"Defaults","title":"Polygons","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Of note are PolygonTraits, which can have holes, for which we automatically add the following functions based on the ngeom implemented by package authors. In some cases, the assumptions here are not correct (most notably Shapefile), where the second ring is not necessarily a hole, but could be another exterior.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"getexterior(p::AbstractPolygonTrait, geom) = getring(p, geom, 1)\nnhole(p::AbstractPolygonTrait, geom) = nring(p, geom) - 1\ngethole(p::AbstractPolygonTrait, geom, i) = getring(p, geom, i + 1)","category":"page"},{"location":"guides/defaults/#LineStrings","page":"Defaults","title":"LineStrings","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Similarly for LineStringTraits, we have the following","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"startpoint(geom) = getpoint(geom, 1)\nendpoint(geom) = getpoint(geom, length(geom))","category":"page"},{"location":"guides/defaults/#Fallbacks","page":"Defaults","title":"Fallbacks","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"In some cases, we know the return value of a function for a specific geometry (sub)type beforehand and have implemented them.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"npoint(::LineTrait, geom) = 2\nnpoint(::TriangleTrait, geom) = 3\nnpoint(::RectangleTrait, geom) = 4\nnpoint(::QuadTrait, geom) = 4\nnpoint(::PentagonTrait, geom) = 5\nnpoint(::HexagonTrait, geom) = 6","category":"page"},{"location":"guides/defaults/#Implementations","page":"Defaults","title":"Implementations","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"GeoInterface is implemented for NTuples, NamedTuples and AbstractVectors to behave as Points. Note the eltype in all cases should be a Real. Only the keys X, Y, Z, and M are supported for NamedTuples.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"a = [1, 2, 3]\nGeoInterface.x(a) == 1\n\nb = (1, 2, 3)\nGeoInterface.y(b) == 2\n\nc = (;X=1, Y=2, Z=3)\nGeoInterface.z(c) == 3","category":"page"},{"location":"guides/defaults/#Wrapper-types","page":"Defaults","title":"Wrapper types","text":"","category":"section"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"It is common that a package does not implement all objects supported by GeoInterface.jl, and may lack the ability to define features. It is useful to define generic objects that can be used in testing and for scripting where geometries need to be constructed from components. Using generic wrappers  means this is backend agnostic: the same code will work if geometries come from GeoJSON.jl, Shapefile.jl, LibGEOS.jl, or other packages defining GeoInterface.jl traits.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Wrapper types are provided for constructing geometries out of any lower-level components that implement GeoInterface.jl traits. These wrappers can wrap objects of the same trait (possibly to add extent data), vectors of child objects, or nested vectors of lower level children, such as points.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"As an example, we can construct a polygon from any GeoInterface.jl compatible  geometries that return LinearRingTrait from GeoInterface.geomtrait:","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"poly = Polygon([interior, hole1, hole2])","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"See the API documentation for each wrapper for more details.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Point\nLine\nLineString\nLinearRing\nPolygon\nMultiLineString\nMultiPolygon\nMultiPoint\nPolyhedralSurface\nGeometryCollection","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Wrappers for Triangle, Hexagon and some other geometries are yet to be implemented. Please make a GitHub issue if you need them.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Feature and FeatureCollection wrappers are also provided, to add properties, crs and extents to any GeoInterface.jl compatible geometries.","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Feature\nFeatureCollection","category":"page"},{"location":"guides/defaults/","page":"Defaults","title":"Defaults","text":"Wrappers are not exported by default because they are very common names used by other packages. To use them directly, run using GeoInterface.Wrappers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeoInterface","category":"page"},{"location":"#GeoInterface","page":"Home","title":"GeoInterface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"An interface for geospatial vector data in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"This Package describe a set of traits based on the Simple Features standard (SF) for geospatial vector data, including the SQL/MM extension with support for circular geometry. By using these traits, it should be easy to parse, serialize and use different custom geometries in the Julia ecosystem, without knowing the specifics of each individual package. In that regard it is similar to Tables.jl, but for geometries instead of tables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Packages which support the GeoInterface.jl interface can be found in Packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For usage see Traits interface, while if you look to implement GeoInterface in your own package, check out Implementing GeoInterface. For background about the interface and Simple Features, see Changes with respect to SF.","category":"page"},{"location":"","page":"Home","title":"Home","text":"compat: Compat\nThis traits interface is new and is a major departure from previous pre-1.0 releases. See History for more information. Feel free to ask questions on Github.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"CurrentModule = GeoInterface","category":"page"},{"location":"guides/developer/#Implementing-GeoInterface","page":"For developers","title":"Implementing GeoInterface","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface requires six functions to be defined for a custom geometry. On top of that it could be useful to also implement some optional methods if they apply or are faster than the Fallbacks.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"If your package also supports geospatial operations on geometries–such as intersections–, please also implement those interfaces where applicable.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"Last but not least, we also provide an interface for features–geometries with properties–if applicable.","category":"page"},{"location":"guides/developer/#Required-for-Geometry","page":"For developers","title":"Required for Geometry","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.isgeometry(geom::customgeom)::Bool = true\nGeoInterface.geomtrait(geom::customgeom)::DataType = XTrait() # <: AbstractGeometryTrait\n# for PointTraits\nGeoInterface.ncoord(geomtrait(geom), geom::customgeom)::Integer\nGeoInterface.getcoord(geomtrait(geom), geom::customgeom, i)::Real\n# for non PointTraits\nGeoInterface.ngeom(geomtrait(geom), geom::customgeom)::Integer\nGeoInterface.getgeom(geomtrait(geom), geom::customgeom, i)","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"Where the getgeom and getcoord could be an iterator (without the i) as well. It will return a new geom with the correct geomtrait. This means that a call to getgeom on a geometry that has a LineStringTrait should return something that implements the PointTrait. This hierarchy can be checked programmatically with subtrait. You read more about the geomtrait in the Type hierarchy.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"The ngeom and getgeom are aliases for their geom specific counterparts, such as npoints and getpoint for LineStringTraits.","category":"page"},{"location":"guides/developer/#Optional-for-Geometry","page":"For developers","title":"Optional for Geometry","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"There are also optional generic methods that could help with locating this geometry.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.crs(geomtrait(geom), geom::customgeom)::GeoFormatTypes.GeoFormat\nGeoInterface.extent(geomtrait(geom), geom::customgeom)::Extents.Extent","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"For extents, Extents.extent(geom::customgeom) is the fallback method for GeoInterface.extent,  and can be used instead here for wider interoperability. If neither is defined, GeoInterface.extent will calculate the extent from the points of the geometry.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"And lastly, there are many other optional functions for each specific geometry. GeoInterface provides fallback implementations based on the generic functions above, but these are not optimized. These are detailed in Fallbacks.","category":"page"},{"location":"guides/developer/#Conversion","page":"For developers","title":"Conversion","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"It is useful if others can convert any custom geometry into your geometry type, if their custom geometry supports GeoInterface as well. This requires the following methods, where the implementation should be defined in terms of GeoInterface methods like ngeom, getgeom, or just coordinates calls.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"# This method will get called on GeoInterface.convert(::Type{T}, geom)\n# if geomtrait(geom) == LineStringTrait()\nGeoInterface.convert(::Type{CustomLineString}, ::LineStringTrait, geom) = ...\nGeoInterface.convert(::Type{CustomPolygon}, ::PolygonTrait, geom) = ...","category":"page"},{"location":"guides/developer/#Required-for-Feature(Collection)s","page":"For developers","title":"Required for Feature(Collection)s","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A Feature is a geometry with properties, and in modern parlance, a row in table. A FeatureCollection is thus a Vector of Features, often represented as a table.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A Feature implements the following:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.isfeature(feat::customfeat)::Bool = true\nGeoInterface.properties(feat::customfeat)\nGeoInterface.geometry(feat::customfeat)","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"While a FeatureCollection implements the following:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.isfeaturecollection(::Type{customcollection}) = true\nGeoInterface.getfeature(trait(::customcollection), ::customcollection, i)\nGeoInterface.nfeature(trait(::customcollection), ::customcollection)\nGeoInterface.geometrycolumns(::customcollection) = (:geometry,)  # can be multiple!","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"The geometrycolumns enables other packages to know which field in a row, or column in a table, contains the geometry or geometries.","category":"page"},{"location":"guides/developer/#Geospatial-Operations","page":"For developers","title":"Geospatial Operations","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"distance(geomtrait(a), geomtrait(b), a, b)\nbuffer(geomtrait(geom), geom, distance)\nconvexhull(geomtrait(geom), geom)","category":"page"},{"location":"guides/developer/#Geospatial-Relations","page":"For developers","title":"Geospatial Relations","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"These functions are used to describe the relations between geometries as defined in the Dimensionally Extended 9-Intersection Model (DE-9IM).","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"equals(geomtrait(a), geomtrait(b), a, b)\ndisjoint(geomtrait(a), geomtrait(b), a, b)\nintersects(geomtrait(a), geomtrait(b), a, b)\ntouches(geomtrait(a), geomtrait(b), a, b)\nwithin(geomtrait(a), geomtrait(b), a, b)\ncontains(geomtrait(a), geomtrait(b), a, b)\noverlaps(geomtrait(a), geomtrait(b), a, b)\ncrosses(geomtrait(a), geomtrait(b), a, b)\nrelate(geomtrait(a), geomtrait(b), a, b, relationmatrix)","category":"page"},{"location":"guides/developer/#Geospatial-Sets","page":"For developers","title":"Geospatial Sets","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"symdifference(geomtrait(a), geomtrait(b), a, b)\ndifference(geomtrait(a), geomtrait(b), a, b)\nintersection(geomtrait(a), geomtrait(b), a, b)\nunion(geomtrait(a), geomtrait(b), a, b)","category":"page"},{"location":"guides/developer/#Testing-the-interface","page":"For developers","title":"Testing the interface","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface provides a Testsuite for a geom type to check whether the required functions that have been correctly implemented and work as expected.","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.testgeometry(geom)\nGeoInterface.testfeature(geom)","category":"page"},{"location":"guides/developer/#Examples","page":"For developers","title":"Examples","text":"","category":"section"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"All custom geometries implement","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.isgeometry(geom::customgeom)::Bool = true","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"Point\"-like traits implements","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom)::DataType = PointTrait()\nGeoInterface.ncoord(::PointTrait, geom::customgeom)::Integer\nGeoInterface.getcoord(::PointTrait, geom::customgeom, i)::Real\n\n# Defaults\nGeoInterface.ngeom(::PointTrait, geom)::Integer = 0\nGeoInterface.getgeom(::PointTrait, geom::customgeom, i) = nothing","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"LineString\"-like traits implements the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom)::DataType = LineStringTrait()\nGeoInterface.ncoord(::LineStringTrait, geom::customgeom)::Integer\n\n# These alias for npoint and getpoint\nGeoInterface.ngeom(::LineStringTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::LineStringTrait, geom::customgeom, i) # of geomtrait Point\n\n# Optional\nGeoInterface.isclosed(::LineStringTrait, geom::customgeom)::Bool\nGeoInterface.issimple(::LineStringTrait, geom::customgeom)::Bool\nGeoInterface.length(::LineStringTrait, geom::customgeom)::Real","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"Polygon\"-like traits can implement the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom)::DataType = PolygonTrait()\nGeoInterface.ncoord(::PolygonTrait, geom::customgeom)::Integer\n\n# These alias for nring and getring\nGeoInterface.ngeom(::PolygonTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::PolygonTrait, geom::customgeom, i)::\"LineStringTrait\"\n\n# Optional\nGeoInterface.area(::PolygonTrait, geom::customgeom)::Real\nGeoInterface.centroid(::PolygonTrait, geom::customgeom)::\"PointTrait\"\nGeoInterface.pointonsurface(::PolygonTrait, geom::customgeom)::\"PointTrait\"\nGeoInterface.boundary(::PolygonTrait, geom::customgeom)::\"LineStringTrait\"","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"GeometryCollection\"-like traits has to implement the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom) = GeometryCollectionTrait()\nGeoInterface.ncoord(::GeometryCollectionTrait, geom::customgeom)::Integer\nGeoInterface.ngeom(::GeometryCollectionTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::GeometryCollectionTrait,geom::customgeomm, i)::\"GeometryTrait\"","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"MultiPoint\"-like traits has to implement the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom) = MultiPointTrait()\nGeoInterface.ncoord(::MultiPointTrait, geom::customgeom)::Integer\n\n# These alias for npoint and getpoint\nGeoInterface.ngeom(::MultiPointTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::MultiPointTrait, geom::customgeom, i)::\"PointTrait\"","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"MultiLineString\"-like traits has to implement the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom) = MultiLineStringTrait()\nGeoInterface.ncoord(::MultiLineStringTrait, geom::customgeom)::Integer\n\n# These alias for nlinestring and getlinestring\nGeoInterface.ngeom(::MultiLineStringTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::MultiLineStringTrait,geom::customgeomm, i)::\"LineStringTrait\"","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"A geom::customgeom with \"MultiPolygon\"-like traits has to implement the following methods:","category":"page"},{"location":"guides/developer/","page":"For developers","title":"For developers","text":"GeoInterface.geomtrait(geom::customgeom) = MultiPolygonTrait()\nGeoInterface.ncoord(::MultiPolygonTrait, geom::customgeom)::Integer\n\n# These alias for npolygon and getpolygon\nGeoInterface.ngeom(::MultiPolygonTrait, geom::customgeom)::Integer\nGeoInterface.getgeom(::MultiPolygonTrait, geom::customgeom, i)::\"PolygonTrait\"","category":"page"},{"location":"tutorials/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"tutorials/installation/","page":"Installation","title":"Installation","text":"Simply do","category":"page"},{"location":"tutorials/installation/","page":"Installation","title":"Installation","text":"]add GeoInterface","category":"page"}]
}
